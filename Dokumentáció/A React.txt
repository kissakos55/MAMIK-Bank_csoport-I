A React

Története:
		
		-A React.js-t eredetileg a Facebook fejlesztette, ebből adódóan a Facebook is azt használja, valamint az Instagram. 2013-ban jelent meg.



Mi az a React?
		-A React egy deklaratív, effektív, és rugalmas JavaScript könyvtár, felhasználói felületek készítéséhez. Lehetővé teszi komplex felhasználói felületek összeállítását izolált kódrészletekből, amiket “komponenseknek” hívunk.

Mit is jelent ez?
 		Egy JavaScript könyvtár, amelyet
		felhasználói felületek, különösen
		egyoldalas alkalmazások (SPA)
		készítésére használnak.

		komponensalapú: az alkalmazások
		kisebb, újrafelhasználható
		komponensekből állnak.

		hatékonyan kezeli a DOM-ot a "virtual
		DOM" segítségével.

		Deklaratív megközelítés, ahol a
		komponensek állapotváltozásai
		automatikusan frissítik a felhasználói
		felületet.

		Virtual DOM használata gyorsabb
		frissítéseket eredményez a
		felhasználói felületen.

		Nagyobb, összetett alkalmazások,
		amelyek sok felhasználói interakciót
		igényelnek.





Miért hasznos ez nekünk?

		
			-Felmerülhet bennünk a kérdés, hogy milyen esetekben érdemes használni ezeket a keretrendszereket, könyvtárakat? 			
			Habár sok mindenben eltérnek,alapvetően sok olyan dolgot meg lehet velük csinálni, amit szimpla JavaScripttel sokkal nehezebb lenne kivitelezni, vagy több idő. 
			A mai modern frontend keretrendszerek előnyei többek közt, hogy

			(pont)Könnyen használhatók
			(pont)Komponensekből állnak, melyeket újra hasznosíthatunk
			(pont)Strukturált, áttekinthető kódot biztosítanak számunkra
			(pont)Lehetőség nyílhat velük nem csupán "single-page" applikációk írására, így az "üzleti logika" jobban elkülöníthető
			(pont)Különféle állapotok jobban leírhatók vele
			(pont)Időt spórolnak meg számunkra





React DOM és Virtual DOM

		React fő jellemzője a Virtual DOM használata, amely egy
		memóriában található DOM-reprezentáció.

		Amikor a React-ben valami változik, először ezt a Virtual
		DOM-ot frissíti.

		A Virtual DOM-ot aztán összehasonlítja a tényleges
		DOM-mal (diff algoritmus), és csak azokat a részeket frissíti
		a valódi DOM-ban, amelyek ténylegesen megváltoztak.




Renderelési folyamat

		A komponens először a kezdeti állapottal (Helló, világ!)
		renderel.

		A felhasználó megnyomja a gombot, ami kiváltja a setMessage
		funkciót, amely frissíti az állapotot.

		A React látja, hogy az állapot változott, ezért újra rendereli a
		komponenst az új értékkel ("Üzenet frissítve!").

		A DOM csak az új üzenetet frissíti, minden más változatlan
		marad.

		Az előbbi példa bemutatja a React alapvető renderelési
		logikáját, és azt, hogyan frissíti hatékonyan a felhasználói
		felületet az állapotváltozások alapján.


React renderelés menete

		A React renderelési folyamata az, ami a komponensekből felépített
		virtuális DOM-ot összehasonlítja a valós DOM-mal, és hatékonyan frissíti
		azt, csak ott, ahol változások történtek. A React komponensek
		alapértelmezés szerint mindig újra renderelnek, amikor az állapotuk
		(state) vagy a kapott props-ok változnak.

		Főbb pontok:

		Renderelés: A komponensek JSX szintaxissal írnak HTML-szerű
		struktúrát, amit a React render() vagy funkcionális komponensek esetén
		maga a komponens visszatérési értéke kezel.

		Virtual DOM: A React a változtatásokat először egy memória alapú
		reprezentáción (virtual DOM) alkalmazza, majd csak azokat a részeket
		frissíti a tényleges DOM-ban, amelyek ténylegesen változtak.

		Újrarenderelés: A komponensek újra renderelődnek, ha az állapot (state)
		vagy a props változik, de a React hatékony diff algoritmussal kezeli a
		DOM frissítését.